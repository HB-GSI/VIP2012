-- DROP SEQUENCE BRAND.S_CLASSES;
CREATE SEQUENCE BRAND.S_CLASSES
  START WITH 0
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;

-- DROP SEQUENCE BRAND.S_SECTIONS;
CREATE SEQUENCE BRAND.S_SECTIONS
  START WITH 0
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;

-- DROP SEQUENCE BRAND.S_ITEMS;
CREATE SEQUENCE BRAND.S_ITEMS
  START WITH 0
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;

-- DROP SEQUENCE BRAND.S_ITEMVALUES;
CREATE SEQUENCE BRAND.S_ITEMVALUES
  START WITH 16
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


-- ALTER TABLE BRAND.VIP2012_CLASSES DROP PRIMARY KEY CASCADE;
-- DROP TABLE BRAND.VIP2012_CLASSES CASCADE CONSTRAINTS;

CREATE TABLE BRAND.VIP2012_CLASSES
(
  ID        INTEGER                             NOT NULL,
  NAME      VARCHAR2(255 CHAR)                  NOT NULL,
  PATH      VARCHAR2(1024 CHAR)                 NOT NULL,
  ANCESTOR  INTEGER
);

CREATE OR REPLACE TRIGGER BRAND.TR_CLASSES_ID
BEFORE INSERT OR UPDATE ON BRAND.VIP2012_CLASSES
FOR EACH ROW
DECLARE
    tmpVar NUMBER;
BEGIN
   IF INSERTING THEN
       IF :NEW.id IS NULL THEN
              SELECT s_classes.NEXTVAL INTO tmpVar FROM dual;
              :NEW.id := tmpVar;
          END IF;
   END IF;  
END tr_classes_ID;

ALTER TABLE BRAND.VIP2012_CLASSES ADD (
  PRIMARY KEY
  (ID)
  ENABLE VALIDATE);

ALTER TABLE BRAND.VIP2012_CLASSES ADD (
  FOREIGN KEY (ANCESTOR) 
  REFERENCES BRAND.VIP2012_CLASSES (ID)
  ENABLE VALIDATE);

-- ALTER TABLE BRAND.VIP2012_SECTIONS DROP PRIMARY KEY CASCADE;
-- DROP TABLE BRAND.VIP2012_SECTIONS CASCADE CONSTRAINTS;

CREATE TABLE BRAND.VIP2012_SECTIONS
(
  ID          INTEGER                           NOT NULL,
  NAME        VARCHAR2(255 CHAR)                NOT NULL,
  FK_CLASSES  INTEGER                           NOT NULL
);

CREATE OR REPLACE TRIGGER BRAND.TR_SECTIONS_ID
BEFORE INSERT OR UPDATE ON BRAND.VIP2012_SECTIONS
FOR EACH ROW
DECLARE
    tmpVar NUMBER;
BEGIN
   IF INSERTING THEN
       IF :NEW.id IS NULL THEN
              SELECT s_sections.NEXTVAL INTO tmpVar FROM dual;
              :NEW.id := tmpVar;
          END IF;
   END IF;
END tr_sections_ID;

ALTER TABLE BRAND.VIP2012_SECTIONS ADD (
  PRIMARY KEY
  (ID)
  ENABLE VALIDATE);

ALTER TABLE BRAND.VIP2012_SECTIONS ADD (
  FOREIGN KEY (FK_CLASSES) 
  REFERENCES BRAND.VIP2012_CLASSES (ID)
  ENABLE VALIDATE);

-- ALTER TABLE BRAND.VIP2012_ITEMS DROP PRIMARY KEY CASCADE;
-- DROP TABLE BRAND.VIP2012_ITEMS CASCADE CONSTRAINTS;

CREATE TABLE BRAND.VIP2012_ITEMS
(
  ID            INTEGER                         NOT NULL,
  NAME          VARCHAR2(255 CHAR)              NOT NULL,
  FK_CLASSES    INTEGER                         NOT NULL,
  FK_BASECLASS  INTEGER                         NOT NULL
);

CREATE OR REPLACE TRIGGER BRAND.TR_ITEMS_ID
BEFORE INSERT OR UPDATE ON BRAND.VIP2012_ITEMS
FOR EACH ROW
DECLARE
    tmpVar NUMBER;
BEGIN
   IF INSERTING THEN
       IF :NEW.id IS NULL THEN
              SELECT s_items.NEXTVAL INTO tmpVar FROM dual;
              :NEW.id := tmpVar;
          END IF;
   END IF;
END tr_items_ID;

ALTER TABLE BRAND.VIP2012_ITEMS ADD (
  PRIMARY KEY
  (ID)
  ENABLE VALIDATE,
  UNIQUE (FK_BASECLASS, NAME)
  ENABLE VALIDATE);

ALTER TABLE BRAND.VIP2012_ITEMS ADD (
  FOREIGN KEY (FK_CLASSES) 
  REFERENCES BRAND.VIP2012_CLASSES (ID)
  ENABLE VALIDATE,
  FOREIGN KEY (FK_BASECLASS) 
  REFERENCES BRAND.VIP2012_CLASSES (ID)
  ENABLE VALIDATE);

-- ALTER TABLE BRAND.VIP2012_ITEMVALUES DROP PRIMARY KEY CASCADE;
-- DROP TABLE BRAND.VIP2012_ITEMVALUES CASCADE CONSTRAINTS;

CREATE TABLE BRAND.VIP2012_ITEMVALUES
(
  ID           INTEGER                          NOT NULL,
  FK_SECTIONS  INTEGER                          NOT NULL,
  FK_ITEMS     INTEGER                          NOT NULL,
  DATA         VARCHAR2(1024 CHAR)
);

CREATE OR REPLACE TRIGGER BRAND.TR_ITEMVALUES_ID
BEFORE INSERT OR UPDATE ON BRAND.VIP2012_ITEMVALUES
FOR EACH ROW
DECLARE
    tmpVar NUMBER;
BEGIN
   IF INSERTING THEN
       IF :NEW.id IS NULL THEN
              SELECT s_itemvalues.NEXTVAL INTO tmpVar FROM dual;
              :NEW.id := tmpVar;
          END IF;
   END IF;  
END tr_itemvalues_ID;

ALTER TABLE BRAND.VIP2012_ITEMVALUES ADD (
  PRIMARY KEY
  (ID)
  ENABLE VALIDATE,
  UNIQUE (FK_SECTIONS, FK_ITEMS)
  ENABLE VALIDATE);

ALTER TABLE BRAND.VIP2012_ITEMVALUES ADD (
  FOREIGN KEY (FK_SECTIONS) 
  REFERENCES BRAND.VIP2012_SECTIONS (ID)
  ENABLE VALIDATE,
  FOREIGN KEY (FK_ITEMS) 
  REFERENCES BRAND.VIP2012_ITEMS (ID)
  ENABLE VALIDATE);
